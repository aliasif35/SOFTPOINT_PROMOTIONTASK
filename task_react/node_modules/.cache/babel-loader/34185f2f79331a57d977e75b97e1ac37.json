{"ast":null,"code":"var _jsxFileName = \"D:\\\\SoftPoint\\\\promotion_task\\\\task_react\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItems = count => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k}`,\n  content: `item ${k}`\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(this.state.items, result.source.index, result.destination.index);\n    this.setState({\n      items\n    });\n  } // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 21\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Put the thing into the DOM!\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 107,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\nexport default App;","map":{"version":3,"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","App","constructor","props","state","items","onDragEnd","bind","destination","source","index","setState","render","provided","snapshot","droppableProps","innerRef","item","draggableProps","dragHandleProps","style","placeholder","document","getElementById"],"sources":["D:/SoftPoint/promotion_task/task_react/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\n// Put the thing into the DOM!\nReactDOM.render(<App />, document.getElementById(\"root\"));\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD,C,CAEA;;;;AACA,MAAMC,QAAQ,GAAGC,KAAK,IACpBC,KAAK,CAACC,IAAN,CAAW;EAAEC,MAAM,EAAEH;AAAV,CAAX,EAA8B,CAACI,CAAD,EAAIC,CAAJ,KAAUA,CAAxC,EAA2CC,GAA3C,CAA+CD,CAAC,KAAK;EACnDE,EAAE,EAAG,QAAOF,CAAE,EADqC;EAEnDG,OAAO,EAAG,QAAOH,CAAE;AAFgC,CAAL,CAAhD,CADF,C,CAMA;;;AACA,MAAMI,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;EAC9C,MAAMC,MAAM,GAAGZ,KAAK,CAACC,IAAN,CAAWQ,IAAX,CAAf;EACA,MAAM,CAACI,OAAD,IAAYD,MAAM,CAACE,MAAP,CAAcJ,UAAd,EAA0B,CAA1B,CAAlB;EACAE,MAAM,CAACE,MAAP,CAAcH,QAAd,EAAwB,CAAxB,EAA2BE,OAA3B;EAEA,OAAOD,MAAP;AACD,CAND;;AAQA,MAAMG,IAAI,GAAG,CAAb;;AAEA,MAAMC,YAAY,GAAG,CAACC,UAAD,EAAaC,cAAb,MAAiC;EACpD;EACAC,UAAU,EAAE,MAFwC;EAGpDC,OAAO,EAAEL,IAAI,GAAG,CAHoC;EAIpDM,MAAM,EAAG,OAAMN,IAAK,MAJgC;EAMpD;EACAO,UAAU,EAAEL,UAAU,GAAG,YAAH,GAAkB,MAPY;EASpD;EACA,GAAGC;AAViD,CAAjC,CAArB;;AAaA,MAAMK,YAAY,GAAGC,cAAc,KAAK;EACtCF,UAAU,EAAEE,cAAc,GAAG,WAAH,GAAiB,WADL;EAEtCJ,OAAO,EAAEL,IAF6B;EAGtCU,KAAK,EAAE;AAH+B,CAAL,CAAnC;;AAMA,MAAMC,GAAN,SAAkBjC,SAAlB,CAA4B;EAC1BkC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACXC,KAAK,EAAEhC,QAAQ,CAAC,EAAD;IADJ,CAAb;IAGA,KAAKiC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;EACD;;EAEDD,SAAS,CAACnB,MAAD,EAAS;IAChB;IACA,IAAI,CAACA,MAAM,CAACqB,WAAZ,EAAyB;MACvB;IACD;;IAED,MAAMH,KAAK,GAAGtB,OAAO,CACnB,KAAKqB,KAAL,CAAWC,KADQ,EAEnBlB,MAAM,CAACsB,MAAP,CAAcC,KAFK,EAGnBvB,MAAM,CAACqB,WAAP,CAAmBE,KAHA,CAArB;IAMA,KAAKC,QAAL,CAAc;MACZN;IADY,CAAd;EAGD,CAxByB,CA0B1B;EACA;;;EACAO,MAAM,GAAG;IACP,oBACE,QAAC,eAAD;MAAiB,SAAS,EAAE,KAAKN,SAAjC;MAAA,uBACE,QAAC,SAAD;QAAW,WAAW,EAAC,WAAvB;QAAA,UACG,CAACO,QAAD,EAAWC,QAAX,kBACC,oBACMD,QAAQ,CAACE,cADf;UAEE,GAAG,EAAEF,QAAQ,CAACG,QAFhB;UAGE,KAAK,EAAElB,YAAY,CAACgB,QAAQ,CAACf,cAAV,CAHrB;UAAA,WAKG,KAAKK,KAAL,CAAWC,KAAX,CAAiBzB,GAAjB,CAAqB,CAACqC,IAAD,EAAOP,KAAP,kBACpB,QAAC,SAAD;YAAyB,WAAW,EAAEO,IAAI,CAACpC,EAA3C;YAA+C,KAAK,EAAE6B,KAAtD;YAAA,UACG,CAACG,QAAD,EAAWC,QAAX,kBACC;cACE,GAAG,EAAED,QAAQ,CAACG,QADhB;cAAA,GAEMH,QAAQ,CAACK,cAFf;cAAA,GAGML,QAAQ,CAACM,eAHf;cAIE,KAAK,EAAE5B,YAAY,CACjBuB,QAAQ,CAACtB,UADQ,EAEjBqB,QAAQ,CAACK,cAAT,CAAwBE,KAFP,CAJrB;cAAA,UASGH,IAAI,CAACnC;YATR;cAAA;cAAA;cAAA;YAAA;UAFJ,GAAgBmC,IAAI,CAACpC,EAArB;YAAA;YAAA;YAAA;UAAA,QADD,CALH,EAsBGgC,QAAQ,CAACQ,WAtBZ;QAAA;UAAA;UAAA;UAAA;QAAA;MAFJ;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAgCD;;AA7DyB,C,CAgE5B;;;AACApD,QAAQ,CAAC2C,MAAT,eAAgB,QAAC,GAAD;EAAA;EAAA;EAAA;AAAA,QAAhB,EAAyBU,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AACA,eAAetB,GAAf"},"metadata":{},"sourceType":"module"}